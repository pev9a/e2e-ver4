plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.12.0"
    id "io.freefair.lombok" version "8.11"
    id "org.gradle.test-retry" version "1.6.0"
    id "com.google.protobuf" version "0.9.4"
}

repositories {
    mavenCentral()
}

group ''
version '1.0'

def allureVersion = "2.29.1",
    selenideVersion = "7.6.1",
    appiumVersion = "9.3.0",
    junitVersion = "5.11.4",
    slf4jVersion = "2.0.16",
    gsonVersion = "2.11.0",
    protobufVersion = "4.29.2",
    grpcVersion = "1.36.0",
    javaxVersion = "1.3.2",
    fakerVersion = "1.0.2",
    restAssuredVersion = "5.5.0",
    commonsIoVersion = "2.18.0",
    commonsCollections4Version = "4.4",
    ownerVersion = "1.0.12"



allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    implementation(
            "io.grpc:grpc-all:$grpcVersion",
            "com.google.protobuf:protobuf-java:$protobufVersion",
            "com.google.protobuf:protobuf-java-util:$protobufVersion",
            "javax.annotation:javax.annotation-api:$javaxVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion"
    )

    testImplementation(
            "com.github.javafaker:javafaker:$fakerVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:$appiumVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "commons-io:commons-io:$commonsIoVersion",
            "org.apache.commons:commons-collections4:$commonsCollections4Version",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.google.code.gson:gson:$gsonVersion"
    )
    protobuf files("${projectDir}/src/test/resources/proto")
}
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    retry {
        maxRetries = 1
        maxFailures = 20
        failOnPassedAfterRetry = false
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}